class Solution:
    
    def minNonZeroProduct(self, p: int) -> int:
        mod = 1_000_000_007
        @cache
        def helper(p, n):  # 1111111..110 ^ n
            if n == 0: return 1
            res = p if n & 1 else 1
            x = helper(p, n//2)
            res *= x
            res *= x
            return res % mod
        # onesAndZero = (2**p -2)
        # return ((2**p-1) * helper(2**(p-1)-1)) % mod

        # we can precompute all the results:
        # print(list(((2**z-1) * helper((2**z-2), 2**(z-1)-1)) % mod for z in range(1, 61)))
        precompResults = [0, 1, 6, 1512, 581202553, 202795991, 57405498, 316555604, 9253531, 857438053, 586669277, 647824153, 93512543, 391630296, 187678728, 431467833, 539112180, 368376380, 150112795, 484576688, 212293935, 828477683, 106294648, 618323081, 186692306, 513022074, 109245444, 821184946, 2043018, 26450314, 945196305, 138191773, 505517599, 861896614, 640964173, 112322054, 217659727, 680742062, 673217940, 945471045, 554966674, 190830260, 403329489, 305023508, 229675479, 865308368, 689473871, 161536946, 99452142, 720364340, 172386396, 198445540, 265347860, 504260931, 247773741, 65332879, 891336224, 221172799, 643213635, 926891661, 813987236]
        return precompResults[p]
